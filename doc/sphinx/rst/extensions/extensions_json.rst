.. _extensions_json:

Using other data file formats
===============================

The recommended way to define your registers is using a :ref:`TOML file <toml_format>`, due
to :ref:`the benefits <why_toml>` this format offers.
Or to use the :ref:`Python API <python_api>`, or even a mix of the two depending on your use case.
However, if using another data file format, such as JSON or YAML, is necessary then that is
also possible.

In this case you need to construct your data on the exact format as the
:ref:`TOML format <toml_format>` and then parse it with a manual call.
Below is an example JSON snippet that sets up some registers, fields and constants:

.. literalinclude:: json/extensions_json.json
   :caption: Register data in JSON format.
   :language: JSON
   :linenos:

.. literalinclude:: py/extensions_json.py
   :caption: Manually parsing a JSON file with register definitions.
   :language: Python
   :linenos:
   :lines: 10-


The HTML page generated by the Python code above can be seen here:
:download:`example_regs.html <../../../../generated/sphinx_rst/register_code/extensions/extensions_json/caesar_regs.html>`
Clearly all the register definitions are available, which means that the JSON parsing worked
as expected.
